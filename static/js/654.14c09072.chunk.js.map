{"version":3,"file":"static/js/654.14c09072.chunk.js","mappings":"mMA+CA,MA6EA,GAAeA,EAAAA,EAAAA,KALUC,IAAK,CAC1BC,WAAYD,EAAME,KAAKD,WACvBE,OAAQH,EAAME,KAAKC,UAGiB,CAAEC,MAAM,MAAhD,EA7EcC,IAA+B,IAA9B,WAAEJ,KAAeK,GAAOD,EAEnC,MAAM,SACFE,EAAQ,aACRC,EACAC,WAAW,OAAEC,GAAQ,MACrBC,IACAC,EAAAA,EAAAA,IAAQ,CACRC,KAAM,WAQV,OAAIP,EAAMH,QACCW,EAAAA,EAAAA,KAACC,EAAAA,GAAQ,CAACC,GAAI,cAGlBC,EAAAA,EAAAA,MAAA,OAAAC,SAAA,EACHJ,EAAAA,EAAAA,KAAA,MAAAI,SAAI,WACJD,EAAAA,EAAAA,MAAA,QAAME,SAAUX,GAXFY,IACdd,EAAMF,MAAMgB,EAASC,MAAOD,EAASE,SAAUF,EAASG,WAAYH,EAASI,SAC7Eb,GAAO,IASgCO,SAAA,EAEnCJ,EAAAA,EAAAA,KAAA,OAAAI,UACIJ,EAAAA,EAAAA,KAAA,SAAOW,KAAK,QAAQC,YAAY,WACxBnB,EAAS,QAAS,CAClBoB,SAAU,iHACVC,UAAW,CACPC,MAAO,GACPC,QAAS,0GAIzBhB,EAAAA,EAAAA,KAAA,OAAAI,UACIJ,EAAAA,EAAAA,KAAA,SAAOW,KAAK,WAAWC,YAAY,cAC3BnB,EAAS,WAAY,CACrBoB,SAAU,iHACVC,UAAW,CACPC,MAAO,GACPC,QAAS,0GAIzBhB,EAAAA,EAAAA,KAAA,OAAAI,UACID,EAAAA,EAAAA,MAAA,SAAAC,SAAA,CAAO,iBAEHJ,EAAAA,EAAAA,KAAA,SAAOW,KAAK,cACJlB,EAAS,aAAc,CAC3B,WAIZU,EAAAA,EAAAA,MAAA,OAAAC,SAAA,CAEKjB,IAAca,EAAAA,EAAAA,KAAA,OAAKiB,IAAK9B,EAAY+B,IAAI,MACxC/B,IAAca,EAAAA,EAAAA,KAAA,SAAOY,YAAY,2FAC1BnB,EAAS,UAAW,CACxB,SAGRU,EAAAA,EAAAA,MAAA,OAAAC,SAAA,CACKR,EAAOW,QAASP,EAAAA,EAAAA,KAAA,KAAGmB,UAAWC,EAAAA,EAAIC,iBAAiBjB,SAAER,EAAOW,MAAMS,SAAW,UAC7EpB,EAAOY,WAAYR,EAAAA,EAAAA,KAAA,KAAGmB,UAAWC,EAAAA,EAAIC,iBAAiBjB,SAAER,EAAOY,SAASQ,SAAW,cAExFhB,EAAAA,EAAAA,KAAA,UAAAI,SAAS,eAEX,G","sources":["components/login/login.jsx"],"sourcesContent":["import React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { connect } from \"react-redux\";\nimport { login } from \"../../REDUX/reducers/authReducer\";\nimport { Navigate } from \"react-router-dom\";\nimport css from '../../common/formsControls/formControls.module.css'\n\n// import { Input, createField } from \"../../common/formsControls/formControls\";\n// import { reduxForm } from \"redux-form\";\n// import { maxLengthCreator, required } from \"../../utils/validators/validators\";\n\n// const LoginForm = ({ handleSubmit, error, captchaURL }) => {\n//     const maxLength20 = maxLengthCreator(20);\n//     return (\n//         <form onSubmit={handleSubmit}>\n\n//             {createField(\"email\", \"email\", [required, maxLength20], Input)}\n//             {createField(\"password\", \"password\", [required, maxLength20], Input, { type: \"password\" })}\n//             {createField(null, \"rememberMe\", [], Input, { type: \"checkbox\" }, \"remember me\")}\n\n//             {/*каптча и  поле ввода каптчи  */}\n//             {captchaURL && <img src={captchaURL} alt=\"#\" />}\n//             {captchaURL && createField('введите символы', 'captcha', [required], Input, {})}\n\n//             <div>\n//                 {error && <div className={css.formSummeryError}>{error}</div>}\n//             </div>\n//             <button>LOGIN</button>\n//         </form>\n//     )\n// }\n// const LoginReduxForm = reduxForm({ form: \"login\" })(LoginForm)\n\n// const Login = (props) => {\n//     const onSubmit = (formData) => {\n//         props.login(formData.email, formData.password, formData.rememberMe, formData.captcha)\n//     }\n//     if (props.isAuth) {\n//         return <Navigate to={'/profile'} />\n//     }\n\n//     return <div>\n//         <h1>LOGIN</h1>\n//         <LoginReduxForm onSubmit={onSubmit} captchaURL={props.captchaURL} />\n//     </div>\n// }\n\nconst Login = ({ captchaURL, ...props }) => {\n\n    const {\n        register,\n        handleSubmit,\n        formState: { errors },\n        reset,\n    } = useForm({\n        mode: 'onBlur'\n    })\n\n    const onSubmit = (formData) => {\n        props.login(formData.email, formData.password, formData.rememberMe, formData.captcha);\n        reset();\n    }\n\n    if (props.isAuth) {\n        return <Navigate to={'/profile'} />\n    }\n\n    return <div>\n        <h1>LOGIN</h1>\n        <form onSubmit={handleSubmit(onSubmit)}>\n\n            <div>\n                <input type=\"email\" placeholder=\"email\"\n                    {...register(\"email\", {\n                        required: \"это поле обязательно\",\n                        maxLength: {\n                            value: 20,\n                            message: \"не более 20 символов\"\n                        }\n                    })}></input>\n            </div>\n            <div>\n                <input type=\"password\" placeholder=\"password\"\n                    {...register('password', {\n                        required: \"это поле обязательно\",\n                        maxLength: {\n                            value: 20,\n                            message: \"не более 20 символов\"\n                        }\n                    })}></input>\n            </div>\n            <div>\n                <label>\n                    \"remember me\"\n                    <input type=\"checkbox\"\n                        {...register('rememberMe', {\n                        })}\n                    ></input>\n                </label>\n            </div>\n            <div>\n                {/*каптча и  поле ввода каптчи  */}\n                {captchaURL && <img src={captchaURL} alt=\"#\" />}\n                {captchaURL && <input placeholder=\"введите символы\"\n                    {...register('captcha', {\n                    })}\n                ></input>}\n            </div>\n            <div>\n                {errors.email && <p className={css.formSummeryError}>{errors.email.message || \"error\"}</p>}\n                {errors.password && <p className={css.formSummeryError}>{errors.password.message || \"error\"}</p>}\n            </div>\n            <button >LOGIN</button>\n        </form>\n    </div>\n}\n\n\n\nconst mapStateToProps = (state) => ({\n    captchaURL: state.auth.captchaURL,\n    isAuth: state.auth.isAuth\n})\n\nexport default connect(mapStateToProps, { login })(Login);\n\n"],"names":["connect","state","captchaURL","auth","isAuth","login","_ref","props","register","handleSubmit","formState","errors","reset","useForm","mode","_jsx","Navigate","to","_jsxs","children","onSubmit","formData","email","password","rememberMe","captcha","type","placeholder","required","maxLength","value","message","src","alt","className","css","formSummeryError"],"sourceRoot":""}